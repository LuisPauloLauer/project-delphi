unit uDmCliente;

interface

uses
  System.SysUtils, System.Classes, Data.FMTBcd, Data.DB, Datasnap.DBClient,
  Datasnap.Provider, Data.SqlExpr, uClienteModel;

type
  TdmCliente = class(TDataModule)
    sqldsPesquisar: TSQLDataSet;
    sqldsInserir: TSQLDataSet;
    sqldsAlterar: TSQLDataSet;
    sqldsExcluir: TSQLDataSet;
    dspPesquisar: TDataSetProvider;
    cdsPesquisar: TClientDataSet;
    cdsPesquisarID: TIntegerField;
    cdsPesquisarTIPO: TStringField;
    cdsPesquisarNOME: TStringField;
    cdsPesquisarCIDADE: TIntegerField;
    cdsPesquisarESTADO: TStringField;
    cdsPesquisarTELEFONE1: TLargeintField;
    cdsPesquisarTELEFONE2: TLargeintField;
    cdsPesquisarEMAIL: TStringField;
    cdsPesquisarCPF: TIntegerField;
    cdsPesquisarCNPJ: TIntegerField;
    sqldsPesquisaEstado: TSQLDataSet;
    sqldsPesquisaEstadoESTADO: TStringField;
    sqldsPesquisaEstadoNOME: TStringField;
    sqldsPesquisaPais: TSQLDataSet;
    sqldsPesquisaPaisPAIS: TStringField;
    sqldsPesquisaPaisNOME: TStringField;
  private
    { Private declarations }
  public
    function gerarID: integer;
    procedure pesquisar(sNome:String);
    procedure CarregarCliente(oCliente:TClienteModel;pCodigo:Integer);
    function inserir(oCliente:TClienteModel; out sErro:String):Boolean;
    function alterar(oCliente:TClienteModel; out sErro:String):Boolean;
    function excluir(pCodigo:Integer; out sErro:String):Boolean;
    function PesquisarEstado(pCidade: Integer): TStringList;
    function PesquisarPais(pCidade: Integer): TStringList;
    { Public declarations }
  end;

var
  dmCliente: TdmCliente;

implementation

{%CLASSGROUP 'Vcl.Controls.TControl'}

uses uDmConexao;

{$R *.dfm}

{ TdmCliente }

function TdmCliente.alterar(oCliente: TClienteModel;
  out sErro: String): Boolean;
begin
    with sqldsAlterar, oCliente do
    begin
      Params[0].AsString := oCliente.Nome;
      Params[1].AsString := oCliente.Endereco;
      Params[2].AsInteger := oCliente.Numero;
      Params[3].AsString := oCliente.Complemento;
      Params[4].AsString := oCliente.Bairro;
      Params[5].AsInteger := oCliente.Cep;
      Params[6].AsInteger := oCliente.Cidade;
      Params[7].AsString := oCliente.Estado;
      Params[8].AsString := oCliente.Pais;
      Params[9].AsInteger := oCliente.Telefone1;
      Params[10].AsInteger := oCliente.Telefone2;
      Params[11].AsString := oCliente.Email;
      Params[12].AsInteger := oCliente.Cpf;
      Params[13].AsInteger := oCliente.Cnpj;
      Params[14].AsInteger := oCliente.Id;

      try
        ExecSQL();
        Result := True;   
      except on E: Exception do
        begin
          sErro := 'Ocorreu erro ao alterar o clinte:'+ sLineBreak+E.Message;
          Result := False; 
        end;
      end;

    end;
end;

procedure TdmCliente.CarregarCliente(oCliente: TClienteModel; pCodigo: Integer);
var
  sqlCliente : TSQLDataSet;
begin
  sqlCliente := TSQLDataSet.Create(nil);
  try
    with sqlCliente do
    begin
      SQLConnection := dmConexao.sqlConexao;
      CommandText := 'SELECT * FROM CLIENTE_EMPRESA WHERE ID = '+IntToStr(pCodigo);
      Close;
      Open;
      with oCliente do
      begin
        Id :=  FieldByName('ID').AsInteger;
        Tipo :=  FieldByName('TIPO').AsString;
        Nome :=  FieldByName('NOME').AsString;
        Endereco :=  FieldByName('ENDERECO').AsString;
        Numero :=  FieldByName('NUMERO').AsInteger;
        Complemento :=  FieldByName('COMPLEMENTO').AsString;
        Bairro :=  FieldByName('BAIRRO').AsString;
        Cep :=  FieldByName('CEP').AsInteger;
        Cidade :=  FieldByName('CIDADE').AsInteger;
        Estado :=  FieldByName('ESTADO').AsString;
        Pais :=  FieldByName('PAIS').AsString;
        Telefone1 :=  FieldByName('TELEFONE1').AsInteger;
        Telefone2 :=  FieldByName('TELEFONE2').AsInteger;
        Email :=  FieldByName('EMAIL').AsString;
        Cpf:=  FieldByName('CPF').AsInteger;
        Cnpj:=  FieldByName('CNPJ').AsInteger;
      end;
    end;
  finally
    FreeAndNil(sqlCliente);
  end;
end;

function TdmCliente.excluir(pCodigo: Integer; out sErro: String): Boolean;
begin
  with sqldsExcluir do
  begin  
     Params[0].AsInteger := pCodigo;

      try
        ExecSQL();
        Result := True;
           
      except on E: Exception do
        begin
          sErro := 'Ocorreu erro ao excluir o clinte:'+ sLineBreak+E.Message;
          Result := False; 
        end;
      end;
  end;
end;

function TdmCliente.gerarID: integer;
var
  sqlNextCodigoId : TSQLDataSet;
begin
  sqlNextCodigoId := TSQLDataSet.Create(nil);
  try
    with sqlNextCodigoId do
    begin
      SQLConnection := dmConexao.sqlConexao;
      CommandText := 'SELECT COALESCE(MAX(ID),0)+1 AS CODIGO FROM CLIENTE_EMPRESA';
      Close;
      Open;

      Result := FieldByName('CODIGO').AsInteger;

    end;
  finally
    FreeAndNil(sqlNextCodigoId);
  end;

end;

function TdmCliente.inserir(oCliente: TClienteModel;
  out sErro: String): Boolean;
begin
    with sqldsInserir, oCliente do
    begin
      Params[0].AsInteger := gerarID;
      Params[1].AsString := oCliente.Tipo;
      Params[2].AsString := oCliente.Nome;
      Params[3].AsString := oCliente.Endereco;
      Params[4].AsInteger := oCliente.Numero;
      Params[5].AsString := oCliente.Complemento;
      Params[6].AsString := oCliente.Bairro;
      Params[7].AsInteger := oCliente.Cep;
      Params[8].AsInteger := oCliente.Cidade;
      Params[9].AsString := oCliente.Estado;
      Params[10].AsString := oCliente.Pais;
      Params[11].AsInteger := oCliente.Telefone1;
      Params[12].AsInteger := oCliente.Telefone2;
      Params[13].AsString := oCliente.Email;
      Params[14].AsInteger := oCliente.Cpf;
      Params[15].AsInteger := oCliente.Cnpj;

      try
        ExecSQL();
        Result := True;   
        
      except on E: Exception do
        begin
          sErro := 'Ocorreu erro ao inserir o clinte:'+ sLineBreak+E.Message;
          Result := False; 
        end;
      end;

    end;
end;

procedure TdmCliente.pesquisar(sNome: String);
begin
  with cdsPesquisar do
  begin
    if (cdsPesquisar.Active = False) then
      cdsPesquisar.Active := True;
    Close;
    ParamByName('PNOME').AsString := '%'+sNome+'%';
    Open;
    First;
  end;
end;

function TdmCliente.PesquisarEstado(pCidade: Integer): TStringList;
var
  sEstado : TStringList;
begin
  with sqldsPesquisaEstado do
  begin
    sEstado := TStringList.Create;
    sEstado.Clear;
    Close;
    ParamByName('PCIDADE').AsInteger := pCidade;
    Open;
    First;

    if (not sqldsPesquisaEstado.IsEmpty) then
    begin
      sEstado.Add(sqldsPesquisaEstado.FieldByName('ESTADO').AsString);
      sEstado.Add(sqldsPesquisaEstado.FieldByName('NOME').AsString);
      Result := sEstado;
    end
    else
    begin
      Result := sEstado;
    end

  end;

end;

function TdmCliente.PesquisarPais(pCidade: Integer): TStringList;
var
  sPais : TStringList;
begin
  with sqldsPesquisaPais do
  begin
    sPais := TStringList.Create;
    sPais.Clear;
    Close;
    ParamByName('PCIDADE').AsInteger := pCidade;
    Open;
    First;

    if (not sqldsPesquisaPais.IsEmpty) then
    begin
      sPais.Add(sqldsPesquisaPais.FieldByName('PAIS').AsString);
      sPais.Add(sqldsPesquisaPais.FieldByName('NOME').AsString);
      Result := sPais;
    end
    else
    begin
      Result := sPais;
    end

  end;
end;

end.
