unit uClienteModel;

interface
  uses
    System.SysUtils;

type
  TCliente = class
  private
      FId: Integer;
      FTipo: String;
      FNome: String;
      FEndereco: String;
      FNumero: Integer;
      FComplemento: String;
      FBairro: String;
      FCep: Integer;
      FCidade: Integer;
      FEstado: String;
      FPais: String;
      FTelefone1: Integer;
      FTelefone2: Integer;
      FEmail: String;
      FCpf: Integer;
      FCnpj: Integer;
    procedure SetBairro(const Value: String);
    procedure SetCep(const Value: Integer);
    procedure SetCidade(const Value: Integer);
    procedure SetCnpj(const Value: Integer);
    procedure SetComplemento(const Value: String);
    procedure SetCpf(const Value: Integer);
    procedure SetEmail(const Value: String);
    procedure SetEndereco(const Value: String);
    procedure SetEstado(const Value: String);
    procedure SetId(const Value: Integer);
    procedure SetNome(const Value: String);
    procedure SetNumero(const Value: Integer);
    procedure SetPais(const Value: String);
    procedure SetTelefone1(const Value: Integer);
    procedure SetTelefone2(const Value: Integer);
    procedure SetTipo(const Value: String);
    function getBairro: String;
    function getcCnpj: Integer;
    function getCep: Integer;
    function getCidade: Integer;
    function getComplemento: String;
    function getCpf: Integer;
    function getEmail: String;
    function getEndereco: String;
    function getEstado: String;
    function getId: Integer;
    function getNome: String;
    function getNumero: Integer;
    function getPais: String;
    function getTelefone1: Integer;
    function getTelefone2: Integer;
    function getTipo: String;
  protected
    { protected declarations }
  public
    Property Id: Integer read getId write SetId;
    Property Tipo: String read getTipo write SetTipo;
    Property Nome: String read getNome write SetNome;
    Property Endereco: String read getEndereco write SetEndereco;
    Property Numero: Integer read getNumero write SetNumero;
    Property Complemento: String read getComplemento write SetComplemento;
    Property Bairro: String read getBairro write SetBairro;
    Property Cep: Integer read getCep write SetCep;
    Property Cidade: Integer read getCidade write SetCidade;
    Property Estado: String read getEstado write SetEstado;
    Property Pais: String read getPais write SetPais;
    Property Telefone1: Integer read getTelefone1 write SetTelefone1;
    Property Telefone2: Integer read getTelefone2 write SetTelefone2;
    Property Email: String read getEmail write SetEmail;
    Property Cpf: Integer read getCpf write SetCpf;
    Property Cnpj: Integer read getcCnpj write SetCnpj;

    { public declarations }

  published
    { published declarations }
  end;

implementation

{ TCliente }

function TCliente.getBairro: String;
begin
  Result := FBairro;
end;

function TCliente.getcCnpj: Integer;
begin
  Result := FCnpj
end;

function TCliente.getCep: Integer;
begin
  Result := FCep
end;

function TCliente.getCidade: Integer;
begin
  Result := FCidade
end;

function TCliente.getComplemento: String;
begin
  Result := FComplemento
end;

function TCliente.getCpf: Integer;
begin
  Result := FCpf
end;

function TCliente.getEmail: String;
begin
  Result := FEmail
end;

function TCliente.getEndereco: String;
begin
  Result := FEndereco
end;

function TCliente.getEstado: String;
begin
  Result := FEstado
end;

function TCliente.getId: Integer;
begin
  Result := FId
end;

function TCliente.getNome: String;
begin
   Result := FNome
end;

function TCliente.getNumero: Integer;
begin
  Result := FNumero
end;

function TCliente.getPais: String;
begin
  Result := FPais
end;

function TCliente.getTelefone1: Integer;
begin
  Result := FTelefone1
end;

function TCliente.getTelefone2: Integer;
begin
  Result := FTelefone2
end;

function TCliente.getTipo: String;
begin
  Result := FTipo
end;

procedure TCliente.SetBairro(const Value: String);
begin
  FBairro := Value;
end;

procedure TCliente.SetCep(const Value: Integer);
begin
  FCep := Value;
end;

procedure TCliente.SetCidade(const Value: Integer);
begin
  FCidade := Value;
end;

procedure TCliente.SetCnpj(const Value: Integer);
begin
  FCnpj := Value;
end;

procedure TCliente.SetComplemento(const Value: String);
begin
  FComplemento := Value;
end;

procedure TCliente.SetCpf(const Value: Integer);
begin
  FCpf := Value;
end;

procedure TCliente.SetEmail(const Value: String);
begin
  FEmail := Value;
end;

procedure TCliente.SetEndereco(const Value: String);
begin
  FEndereco := Value;
end;

procedure TCliente.SetEstado(const Value: String);
begin
  FEstado := Value;
end;

procedure TCliente.SetId(const Value: Integer);
begin
  FId := Value;
end;

procedure TCliente.SetNome(const Value: String);
begin
  if Value = EmptyStr then
    raise EArgumentException.Create('Nome precisa ser preenchido!');
  FNome := Value;
end;

procedure TCliente.SetNumero(const Value: Integer);
begin
  FNumero := Value;
end;

procedure TCliente.SetPais(const Value: String);
begin
  FPais := Value;
end;

procedure TCliente.SetTelefone1(const Value: Integer);
begin
  FTelefone1 := Value;
end;

procedure TCliente.SetTelefone2(const Value: Integer);
begin
  FTelefone2 := Value;
end;

procedure TCliente.SetTipo(const Value: String);
begin
  FTipo := Value;
end;

end.
